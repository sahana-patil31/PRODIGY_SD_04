# Function to print the Sudoku grid nicely
def print_grid(grid):
    for row in range(9):
        for col in range(9):
            print(grid[row][col], end=" ")
        print()
    print()

# Check if placing a number is valid
def is_valid(grid, row, col, num):
    # Check row
    if num in grid[row]:
        return False

    # Check column
    for r in range(9):
        if grid[r][col] == num:
            return False

    # Check 3x3 box
    start_row = row - row % 3
    start_col = col - col % 3
    for r in range(3):
        for c in range(3):
            if grid[start_row + r][start_col + c] == num:
                return False

    return True

# Backtracking solver
def solve_sudoku(grid):
    for row in range(9):
        for col in range(9):
            if grid[row][col] == 0:
                for num in range(1, 10):
                    if is_valid(grid, row, col, num):
                        grid[row][col] = num

                        if solve_sudoku(grid):
                            return True

                        grid[row][col] = 0  # Undo and try next number

                return False  # Trigger backtracking
    return True  # Puzzle solved

# Example Sudoku puzzle (0 means empty)
puzzle = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],

    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],

    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
]

# Run the solver
print("ðŸ§© Original Sudoku Puzzle:")
print_grid(puzzle)

if solve_sudoku(puzzle):
    print("âœ… Sudoku Solved:")
    print_grid(puzzle)
else:
    print("âš  No solution exists forÂ thisÂ puzzle.")